// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float4 _DirectionalLight;
float2 _PixelOffset;
float _SkyboxTexFactor;

//Skybox Texture
Texture2D<float4> _SkyboxTex;
SamplerState sampler_SkyboxTex;
static const float PI = 3.14159265f;
static const float EPSILON = 0.00001f;

struct Ray
{
    float3 origin;
    float3 direction;
	float3 energy;
};

struct RayHit
{
	float3 position;
	float distance;
	float3 normal;
    float3 albedo;
    float3 specular;
};

struct Sphere
{
    float3 position;
    float radius;
    float3 albedo;
    float3 specular;
};

struct Triangle
{
    float3 v1, v2, v3;
    float3 normal; //flat shading will do for now
    float3 albedo;
    float3 specular;
};

//Structured Buffers
StructuredBuffer<Sphere> _Spheres;
StructuredBuffer<Triangle> _Triangles;

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
//transform camera origin in world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
// Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;

// Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.0f, 0.0f, 0.0f);
    hit.specular = float3(0.0f, 0.0f, 0.0f);

    return hit;
}

Triangle CreateTriangle()
{
    Triangle t;
    t.albedo = float3(0.4f, 0.4f, 0.4f);
    t.specular = float3(0.8f, 0.8f, 0.8f);
    t.v1 = float3(1.0f, 1.0f, 3.0f);
    t.v2 = float3(0.0f, 3.0f, 3.0f);
    t.v3 = float3(-1.0f, 1.0f, 3.0f);
    t.normal = float3(0.0f, 0.0f, -1.0f);

    return t;
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
//calculate groundplane hit distance
    float t = -ray.origin.y / ray.direction.y;

    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
        bestHit.albedo = float3(0.4f, 0.4f, 0.4f);
        bestHit.specular = float3(0.8f, 0.8f, 0.8f);
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
    // Calculate distance along the ray where the sphere is intersected
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    if (p2sqr < 0)
	    return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;

    if (t > 0 && t < bestHit.distance)
    {
	    bestHit.distance = t;
	    bestHit.position = ray.origin + t * ray.direction;
	    bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.albedo = sphere.albedo;
        bestHit.specular = sphere.specular;
    }
}

void IntersectTriangle(Ray ray, inout RayHit bestHit, Triangle tri)
{
   //algorithm used:  http://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm

    float3 e1 = tri.v2 - tri.v1;
    float3 e2 = tri.v3 - tri.v1;
    float3 p = cross(ray.direction, e2); 
    double det = dot(e1, p); 
    if (det > -EPSILON && det < EPSILON)
        return;
        
    double inv_det = 1.f / det;
    float3 t = ray.origin - tri.v1;

    double u = (dot(t, p) * inv_det); 
    if (u < 0.f || u > 1.f)
        return;

    float3 q = cross(t, e1);
    double v = dot(ray.direction, q) * inv_det;
    if (v < 0.f || (u + v) > 1.f)
        return;

    double dist = dot(e2, q) * inv_det; 
    if (dist > EPSILON && dist < bestHit.distance)
    {
        bestHit.distance = dist;
        bestHit.normal = tri.normal;
        bestHit.position = ray.origin - ray.direction * bestHit.distance;
        bestHit.albedo = tri.albedo;
        bestHit.specular = tri.specular;
    }
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();

    //intersect ground plane
    IntersectGroundPlane(ray, bestHit);

    //intersect debug triangle
    //Triangle t = CreateTriangle();
    //IntersectTriangle(ray, bestHit, t);

    //intersect spheres
    /*uint numSpheres, strideSpheres;
    _Spheres.GetDimensions(numSpheres, strideSpheres);
    for (uint i = 0; i < numSpheres; i++)
    {
       IntersectSphere(ray, bestHit, _Spheres[i]);
    }*/

    //intersect triangles
    uint numTriangles, strideTriangles;
    _Triangles.GetDimensions(numTriangles, strideTriangles);
    for (uint j = 0; j < numTriangles; j++)
    {
       IntersectTriangle(ray, bestHit, _Triangles[j]);
    }

    return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF)
    {
        float3 specular = hit.specular;
        float3 albedo = hit.albedo;
		// Reflect the ray and multiply energy with specular reflection
        ray.origin = hit.position + hit.normal * 0.001f;
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= specular;
		
		// Shadow test ray
        bool shadow = false;
        Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -1 * _DirectionalLight.xyz);
        RayHit shadowHit = Trace(shadowRay);
        if (shadowHit.distance != 1.#INF)
        {
            return float3(0.0f, 0.0f, 0.0f);
        }

		// Return a diffuse-shaded color
        return saturate(dot(hit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * albedo;

    }
    else
    {
        // Erase the ray's energy - the sky doesn't reflect anything
        ray.energy = 0.0f;
		    
        // Write texture samples
        // https://en.wikipedia.org/wiki/Spherical_coordinate_system#Coordinate_system_conversions
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return _SkyboxTex.SampleLevel(sampler_SkyboxTex, float2(phi, theta), 0).xyz * _SkyboxTexFactor;
    }
}

    [numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
// Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);

// Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);

// Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);

//Trace and Shade
    float3 result = float3(0, 0, 0);
    for (int i = 0; i < 8; i++)
    {
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit);
        if (!any(ray.energy))
            break;
    }

    Result[id.xy] = float4(result, 1);
}
